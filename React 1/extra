https://insights.stackoverflow.com/survey/2019
https://code.visualstudio.com/
https://nodejs.org/en/
https://www.npmjs.com/

////////////////////////
Basic JavaScript
Npm
React = 3
React_hooks -1
React-Redux =2
React-GarphQL 1
React-JWT(Login Logut)-1
React-Saga -1
Depolyment
-> MERN
Basic React Native=1
Testing
-> Docker
-> Nginx

npm i enzyme-adapter-react-16  react-addons-test-utild react-test-renderer

Mock API
json-server

Github

--------NOT--------------
API
GarphQL
Login/Logout

///////////////
SPA
Single Page Application

Component

HooksComponent

Class Component         |         Functional
----------------------------------------------------------
Logical Component       |   Dump Component         
Use to call api and     |   Are use to display data
manage lifecycle

Heavy as compare to func|   Functional are light in weight
------------------------------------------------------------



////////Npm////
> Local package
> Global Package

/////
Step To Create Package.json
//////////
> Name
> Description
> Script(start,build)
> meta data
> packages

**NodeJs must be installed in system
> navigate to the folder using cmd/terminal
> npm init 
> answer all questions
> type yes


//////////////////////////////
Step To install packages
//////////////////////////////
> navigate to the folder using cmd/terminal
> npm i react/ npm install react
npm uninstall react



>>>>>>>>>
Need to generate Application
Will go global
<<<<<<<<<<<<<<<<<

//////////////////////////////
Step To install Global packages
//////////////////////////////
#window
> Run cmd as administrator
> npm i -g create-react-app

#mac/linux
> Open terminal
> sudo npm i -g create-react-app


///Step to React App///

####window
>>>>>One Time<<<<<<
> Run cmd as administrator
> npm i -g create-react-app

>>>>>Next All Time<<<<<<
> navigate to the folder using cmd/terminal
> create-react-app appname


####Mac
>>>>>One Time<<<<<<
> Open terminal
> sudo npm i -g create-react-app

>>>>>Next All Time<<<<<<
> navigate to the folder using cmd/terminal
> create-react-app appname



>>>>>>>>>>>>>>>
State > act like a local variable
Props help to transfer the data

ComponentA  =======>       ComponentB
State        Props           State

Transfer of data only happen when component is nested

TagName
ClassName
id 

 
map  > Help to iterarte over data
filter > to filter out value
indexOf

var a = [0,1,2,3,4]
a.map((data) => { return data*2})
(5) [0, 2, 4, 6, 8]
a.filter((data) => { return data*2})
(4) [1, 2, 3, 4]

var city = ["Delhi","London","Nice","Amsterdam"]
undefined
city.indexOf("Nice")
2
city.indexOf("London")
1
city.indexOf("Paris")
-1


var age =[54,23,15,67,34]
age.filter((data)=> { return data>30})

///
npm i react-router-dom
BrowserRouter Link Route
<Link to="/">


///Dummy Api////
json-server
npm i -g json-server
json-server --watch db2.json --port 8700


//////////////
/******GetAllUser*****/
(GET)> http://localhost:5000/api/auth/users

/******Register*****/
(POST)> http://localhost:5000/api/auth/register
(body) => {"name":"Aakash", "email":"aa@gmail.com","password":"12345678","role":"user?"}


/******Login*****/
(POST) => http://localhost:5000/api/auth/login
(body)  => {"email":"aa@gmail.com","password":"12345678"}
(response)=> {auth:true,token:'dgsdg'}

/******UserInfo*****/
(GET) => http://localhost:5000/api/auth/userinfo
(Header) => {'x-access-token':'token value from login'}
(response) => {userinfo}


////
npm i apollo-boost graphql-tag react-apollo

function looping(userInput){
    for(i=0;i<userInput;i++){
        console.log(i)
    }
}

function  * looping(userInput){
    for(i=0;i<userInput;i++){
        yield i
    }
}
undefined
looping(3)
looping {<suspended>}
var data = looping(5)
undefined
data.next()
{value: 0, done: false}
data.next()
{value: 1, done: false}
data.next()
{value: 2, done: false}
data.next()
{value: 3, done: false}
data.next()
{value: 4, done: false}
data.next()
{value: undefined, done: true}


/////
React Native
///////
npm i -g create-react-native-app
create-react-native-app myapp
npm run web


>>>>>>>>>>>>>>>>>>>
docker build . -t julyreact
docker run -p 8086:3000 julyreact


localhost:8086


nginx.conf
server {
        listen       8081;
        server_name  localhost;
        location / {
	    root   /var/www/react-app;
        index  index.html index.htm;
        }
    }
